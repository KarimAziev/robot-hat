name: CI & Publish

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: |
            3.11
            3.12
            3.13

    - name: Install Node.js (needed for Pyright)
      uses: actions/setup-node@v4
      with:
        node-version: current

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]
        pip install pytest pytest-cov

    - name: Install Pyright
      run: npm install -g pyright

    - name: Run Pyright static type checker
      run: pyright

    - name: Lint code
      run: |
        black --check .
        isort --profile black --check-only .

    - name: Run tests with unittest and measure coverage
      run: |
        coverage run -m unittest discover
        coverage xml
        coverage report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools

      - name: Build the package
        run: python -m build

      - name: List contents of dist directory
        run: ls -al dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Extract artifact
        run: |
          mkdir -p dist
          ls -al
          unzip dist.zip -d dist
          ls -al dist/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Verify dist contents
        run: ls -al dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*